const User = require('../models/user.model');
const jwt = require('jsonwebtoken');

// Register user (important: use `new User` + `.save()`)
exports.registerUser = async (req, res) => {
    try {
        const { name, email, password } = req.body;

        const existing = await User.findOne({ email });
        if (existing) {
            return res.status(400).json({ error: '–ò–º—ç–π–ª –±“Ø—Ä—Ç–≥—ç–ª—Ç—ç–π –±–∞–π–Ω–∞' });
        }

        const user = new User({ name, email, password }); // üîê triggers pre-save hook
        await user.save();

        res.status(201).json({ message: '–ê–º–∂–∏–ª—Ç—Ç–∞–π –±“Ø—Ä—Ç–≥—ç–≥–¥–ª—ç—ç', user });
    } catch (err) {
        console.error('‚ùå Register error:', err);
        res.status(500).json({ error: '–°–µ—Ä–≤–µ—Ä–∏–π–Ω –∞–ª–¥–∞–∞' });
    }
};

// Login user
exports.loginUser = async (req, res) => {
    try {
        const { email, password } = req.body;

        const user = await User.findOne({ email });
        if (!user) {
            return res.status(401).json({ error: '–ò–º—ç–π–ª —ç—Å–≤—ç–ª –Ω—É—É—Ü “Ø–≥ –±—É—Ä—É—É' });
        }

        const isMatch = await user.comparePassword(password);
        if (!isMatch) {
            return res.status(401).json({ error: '–ò–º—ç–π–ª —ç—Å–≤—ç–ª –Ω—É—É—Ü “Ø–≥ –±—É—Ä—É—É' });
        }

        const token = jwt.sign(
            { userId: user._id },
            process.env.JWT_SECRET || 'secret',
            { expiresIn: '1d' }
        );

        res.status(200).json({
            token,
            user: {
                id: user._id,
                email: user.email,
                nickname: user.name
            }
        });
    } catch (err) {
        console.error('‚ùå Login error:', err);
        res.status(500).json({ error: '–°–µ—Ä–≤–µ—Ä–∏–π–Ω –∞–ª–¥–∞–∞' });
    }
};
